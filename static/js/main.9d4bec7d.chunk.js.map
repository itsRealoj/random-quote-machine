{"version":3,"sources":["component/RandomQuote.js","App.js","serviceWorker.js","index.js"],"names":["RandomQuote","props","state","quote","data","author","fetch","then","json","d","push","Math","floor","random","ceil","setState","console","log","id","className","this","href","title","onClick","handleQuote","bind","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0MA2FeA,E,kDAxFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,KAAM,IAJS,E,gEAQE,IAAD,OACdA,EAAO,GACPD,EAAQ,GACRE,EAAS,GAEbC,MACE,+IAECC,MAAK,SAACH,GAAD,OAAUA,EAAKI,UACpBD,MAAK,SAACE,GACLL,EAAKM,KAAKD,EAAEE,KAAKC,MAAMD,KAAKE,SAAWF,KAAKG,KAAK,QACjDX,EAAQC,EAAK,GAAGD,MAChBE,EAASD,EAAK,GAAGC,OACjB,EAAKU,SAAS,CACZZ,QACAE,gB,oCAKO,IAAD,OACRD,EAAO,GACPD,EAAQ,GACRE,EAAS,GAEbC,MACE,+IAECC,MAAK,SAACH,GAAD,OAAUA,EAAKI,UACpBD,MAAK,SAACE,GACLL,EAAKM,KAAKD,EAAEE,KAAKC,MAAMD,KAAKE,SAAWF,KAAKG,KAAK,QACjDX,EAAQC,EAAK,GAAGD,MAChBE,EAASD,EAAK,GAAGC,OACjB,EAAKU,SAAS,CACZZ,QACAE,gB,oCAMNW,QAAQC,IAAI,S,+BAIZ,OACE,yBAAKC,GAAG,WACN,wBAAIC,UAAU,SAAd,oBAEA,yBAAKD,GAAG,aACN,yBAAKA,GAAG,QACN,2BAAIE,KAAKlB,MAAMC,QAEjB,yBAAKe,GAAG,UACN,4BAAKE,KAAKlB,MAAMG,SAGlB,yBAAKa,GAAG,WACN,uBACEA,GAAG,cACHG,KAAI,gDAA2CD,KAAKlB,MAAMC,MAAtD,YAA+DiB,KAAKlB,MAAMG,QAE9EiB,MAAM,+BACN,8BACE,uBAAGH,UAAU,gCADf,UAKF,4BACED,GAAG,YACHC,UAAU,UACVI,QAASH,KAAKI,YAAYC,KAAKL,OAHjC,oB,GA7EcM,aCYXC,MAVf,WACE,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.9d4bec7d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass RandomQuote extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: '',\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    let data = [];\n    let quote = '';\n    let author = '';\n\n    fetch(\n      'https://gist.githubusercontent.com/shreyasminocha/7d5dedafc1fe158f82563c1223855177/raw/325d51aca7165b2498971afcff9bed286a52dc0e/quotes.json',\n    )\n      .then((data) => data.json())\n      .then((d) => {\n        data.push(d[Math.floor(Math.random() * Math.ceil(100))]);\n        quote = data[0].quote;\n        author = data[0].author;\n        this.setState({\n          quote,\n          author,\n        });\n      });\n  }\n\n  handleQuote() {\n    let data = [];\n    let quote = '';\n    let author = '';\n\n    fetch(\n      'https://gist.githubusercontent.com/shreyasminocha/7d5dedafc1fe158f82563c1223855177/raw/325d51aca7165b2498971afcff9bed286a52dc0e/quotes.json',\n    )\n      .then((data) => data.json())\n      .then((d) => {\n        data.push(d[Math.floor(Math.random() * Math.ceil(100))]);\n        quote = data[0].quote;\n        author = data[0].author;\n        this.setState({\n          quote,\n          author,\n        });\n      });\n  }\n\n  handleTweet() {\n    console.log('ho!');\n  }\n\n  render() {\n    return (\n      <div id='wrapper'>\n        <h1 className='title'>Random Quote App</h1>\n\n        <div id='quote-box'>\n          <div id='text'>\n            <p>{this.state.quote}</p>\n          </div>\n          <div id='author'>\n            <h5>{this.state.author}</h5>\n          </div>\n\n          <div id='buttons'>\n            <a\n              id='tweet-quote'\n              href={`https://twitter.com/intent/tweet?text=${this.state.quote} ${this.state.author}`}\n              // target='_blank'\n              title='Post this quote on twitter!'>\n              <span>\n                <i className='fab fa-twitter twitter-icon' />\n                tweet\n              </span>\n            </a>\n            <button\n              id='new-quote'\n              className='buttons'\n              onClick={this.handleQuote.bind(this)}>\n              New Quote\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default RandomQuote;\n","import React from 'react';\nimport RandomQuote from './component/RandomQuote';\n// import './styles';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <RandomQuote />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}